---
- name: Debug SSH Host Key Setup on Jump Host
  hosts: jump
  gather_facts: false
  vars:
    ansible_user_dir: /home/rheluser
    # REMOVED: private_key_path: "{{ private_key_path | default('~/.ssh/ansible-demo-key') }}"
    remote_key_dest: "/home/rheluser/.ssh/ansible-demo-key"
    aap_host_subnet: "10.0.1.*" # Adjust this if your AAP host is not in this subnet
    # Ensure this list reflects the hosts you want to add keys for
    # It dynamically builds a list of hosts from your inventory's 'aap' and 'rhel_web' groups.
    target_hosts_for_keyscan: "{{ (groups['aap'] | default([])) + (groups['rhel_web'] | default([])) }}"

  tasks:
    # ─────────────────────────────────────────────────────────────
    # Step 1 ▸ Ensure ~/.ssh exists on the jump host
    # ─────────────────────────────────────────────────────────────
    - name: Ensure ~/.ssh on jump host exists
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.ssh"
        state: directory
        mode: '0700'
        owner: rheluser
        group: rheluser

    # ─────────────────────────────────────────────────────────────
    # Step 2 ▸ Copy the private key to the jump host
    # ─────────────────────────────────────────────────────────────
    - name: Copy private SSH key to the jump host
      ansible.builtin.copy:
        # Use default filter directly here for the source path
        src: "{{ private_key_path | default('~/.ssh/ansible-demo-key') }}"
        dest: "{{ remote_key_dest }}"
        mode: '0600'
        owner: rheluser
        group: rheluser

    # ─────────────────────────────────────────────────────────────
    # Step 3 ▸ Configure OpenSSH on the jump host for broader compatibility
    # ─────────────────────────────────────────────────────────────
    - name: Configure SSH client on the jump host
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.ssh/config"
        create: true
        owner: rheluser
        group: rheluser
        mode: '0600'
        block: |
          Host {{ aap_host_subnet }}
            User rheluser
            IdentityFile ~/.ssh/ansible-demo-key
            IdentitiesOnly yes
            # Add these lines to help with negotiation issues (no backslashes)
            PubkeyAcceptedAlgorithms +ssh-rsa,ssh-dss,rsa-sha2-256,rsa-sha2-512,ssh-ed25519,ecdsa-sha2-nistp256,sk-ssh-ed25519@openssh.com,sk-ecdsa-sha2-nistp256@openssh.com
            HostKeyAlgorithms +ssh-rsa,ssh-dss,rsa-sha2-256,rsa-sha2-512,ssh-ed25519,ecdsa-sha2-nistp256,sk-ssh-ed25519@openssh.com,sk-ecdsa-sha2-nistp256@openssh.com
            KexAlgorithms +diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1
            Ciphers +aes128-cbc,aes192-cbc,aes256-cbc
            ConnectTimeout 10
            # StrictHostKeyChecking no
            # UserKnownHostsFile /dev/null

    # ─────────────────────────────────────────────────────────────
    # Step 4 ▸ Fetch SSH host keys for internal VMs
    # ─────────────────────────────────────────────────────────────
    - name: Scan SSH host keys for internal VMs
      ansible.builtin.command: "ssh-keyscan -p 22 -H {{ hostvars[item].ansible_host }}"
      register: _ssh_keyscan_result
      delegate_to: "{{ groups['jump'][0] }}"
      changed_when: false
      loop: "{{ target_hosts_for_keyscan }}"
      when:
        - hostvars[item].ansible_host is defined
        - item is string and item | length > 0

    - name: DEBUG - ssh-keyscan results for each host
      debug:
        var: item
        verbosity: 1
      loop: "{{ _ssh_keyscan_result.results }}"
      loop_control:
        label: "{{ item.item }}"
      when: _ssh_keyscan_result.results is defined and (_ssh_keyscan_result.results | length > 0)
      # ... (previous tasks remain the same) ...

    # ─────────────────────────────────────────────────────────────
    # Step 5 ▸ Fetch SSH host keys for internal VMs
    # ─────────────────────────────────────────────────────────────
    - name: Scan SSH host keys for internal VMs
      ansible.builtin.command: "ssh-keyscan -p 22 -H {{ hostvars[item].ansible_host }}"
      register: _ssh_keyscan_result
      delegate_to: "{{ groups['jump'][0] }}"
      changed_when: false
      loop: "{{ target_hosts_for_keyscan }}"
      when:
        - hostvars[item].ansible_host is defined
        - item is string and item | length > 0

    - name: DEBUG - ssh-keyscan results for each host
      debug:
        var: item
        verbosity: 1
      loop: "{{ _ssh_keyscan_result.results }}"
      loop_control:
        label: "{{ item.item }}"
      when: _ssh_keyscan_result.results is defined and (_ssh_keyscan_result.results | length > 0)

    # ─────────────────────────────────────────────────────────────
    # Step 6 ▸ Add those keys to ~/.ssh/known_hosts on the jump host
    # ─────────────────────────────────────────────────────────────
    - name: Add scanned keys to ~/.ssh/known_hosts (remove old entry first)
      ansible.builtin.known_hosts:
        name: "{{ item.item }}"
        state: absent # Remove the entry first, in case the key changed
      loop: >-
        {{ _ssh_keyscan_result.results
            | selectattr('rc','defined')
            | selectattr('rc','equalto',0)
            | selectattr('stdout','defined')
            | selectattr('stdout','truthy')
            | list }}
      delegate_to: "{{ groups['jump'][0] }}"
      # CORRECTED 'when' condition below:
      when: _ssh_keyscan_result.results is defined and (_ssh_keyscan_result.results | length > 0)


    - name: Add scanned keys to ~/.ssh/known_hosts (add new entry)
      ansible.builtin.known_hosts:
        name: "{{ item.item }}"
        key: "{{ item.stdout }}"
        state: present
        hash_host: true
      loop: >-
        {{ _ssh_keyscan_result.results
            | selectattr('rc','defined')
            | selectattr('rc','equalto',0)
            | selectattr('stdout','defined')
            | selectattr('stdout','truthy')
            | list }}
      delegate_to: "{{ groups['jump'][0] }}"
      # CORRECTED 'when' condition below:
      when: _ssh_keyscan_result.results is defined and (_ssh_keyscan_result.results | length > 0)
