---
- name: Provision VM Layer (AAP, AD PKI, Web Servers)
  hosts: localhost
  gather_facts: true

  vars:
    # Dynamically resolve directory paths relative to playbook location
    vms_dir: "{{ playbook_dir }}/../../terraform/vms"
    foundations_dir: "{{ playbook_dir }}/../../terraform/foundations"
    secrets_file: "{{ playbook_dir }}/../../terraform/secrets/windows-admin.b64"
    ssh_key_path: "{{ lookup('env', 'HOME') + '/.ssh/ansible-demo-key.pub' }}"

    # Common values for provisioning
    admin_username: "adminuser"
    random_suffix: "dev01"

  tasks:

    # ─────────────────────────────────────────────────────
    # SSH Key Handling
    # ─────────────────────────────────────────────────────

    - name: Ensure SSH public key exists
      stat:
        path: "{{ ssh_key_path }}"
      register: ssh_key_check

    - name: Fail if SSH public key is missing
      fail:
        msg: "The SSH public key file was not found at {{ ssh_key_path }}"
      when: not ssh_key_check.stat.exists

    - name: Read and decode SSH public key
      slurp:
        src: "{{ ssh_key_path }}"
      register: ssh_key_raw

    - name: Set decoded SSH key
      set_fact:
        ssh_key_decoded: "{{ ssh_key_raw.content | b64decode }}"

    # ─────────────────────────────────────────────────────
    # Secrets Handling
    # ─────────────────────────────────────────────────────

    - name: Ensure secrets file exists
      stat:
        path: "{{ secrets_file }}"
      register: secrets_file_check

    - name: Fail if secrets file is missing
      fail:
        msg: "The secrets file was not found at {{ secrets_file }}"
      when: not secrets_file_check.stat.exists

    - name: Decode Windows admin password from base64 (OS-aware)
      shell: >
        base64 {{ '--decode' if ansible_system != 'Darwin' else '-D -i' }} {{ secrets_file }}
      register: admin_password_output
      changed_when: false

    - name: Set Windows admin password as variable
      set_fact:
        admin_password: "{{ admin_password_output.stdout }}"

    # ─────────────────────────────────────────────────────
    # Gather Terraform Outputs from Foundations Layer
    # ─────────────────────────────────────────────────────

    - name: Get Terraform outputs from foundations
      command: terraform output -raw {{ item }}
      args:
        chdir: "{{ foundations_dir }}"
      register: foundation_outputs
      loop:
        - subnet_id
        - linux_nsg_id
        - windows_nsg_id
      changed_when: false

    - name: Set subnet and NSG output variables
      set_fact:
        subnet_id: "{{ foundation_outputs.results[0].stdout }}"
        linux_nsg_id: "{{ foundation_outputs.results[1].stdout }}"
        windows_nsg_id: "{{ foundation_outputs.results[2].stdout }}"

    # ─────────────────────────────────────────────────────
    # Provision VM Layer via Terraform
    # ─────────────────────────────────────────────────────

    - name: Initialize Terraform in vms directory
      command:
        cmd: terraform init
        chdir: "{{ vms_dir }}"
      args:
        creates: "{{ vms_dir }}/.terraform"

    - name: Apply Terraform for VM layer
      command:
        cmd: >
          terraform apply -auto-approve
          -var="location=EastAsia"
          -var="resource_group_name=cert-renewal-demo-rg"
          -var="subnet_id={{ subnet_id }}"
          -var="linux_nsg_id={{ linux_nsg_id }}"
          -var="windows_nsg_id={{ windows_nsg_id }}"
          -var="admin_ssh_public_key={{ ssh_key_decoded }}"
          -var="admin_username={{ admin_username }}"
          -var="admin_password={{ admin_password }}"
          -var="random_suffix={{ random_suffix }}"
        chdir: "{{ vms_dir }}"
      changed_when: false
