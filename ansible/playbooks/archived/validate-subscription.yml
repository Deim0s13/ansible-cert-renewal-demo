# ─────────────────────────────────────────────────────────────
# Playbook: validate-subscription.yml
# Purpose: Ensure current Azure subscription matches Terraform state
# ─────────────────────────────────────────────────────────────

- name: Validate Azure Subscription and Clean Stale Terraform State
  hosts: localhost
  gather_facts: false
  vars:
    state_file: "{{ foundations_dir }}/terraform.tfstate"
    foundations_dir: "{{ playbook_dir }}/../../terraform/foundations"
    state_file: "{{ foundations_dir }}/terraform.tfstate"

  tasks:

    # ─────────────────────────────────────────────────────────
    # Get Current Azure Subscription ID
    # ─────────────────────────────────────────────────────────
    - name: Get current Azure subscription ID
      command: az account show --query id --output tsv
      register: az_sub_output

    - name: Set current subscription ID
      set_fact:
        subscription_id: "{{ az_sub_output.stdout }}"

    # ─────────────────────────────────────────────────────────
    # Check Existing Terraform State File
    # ─────────────────────────────────────────────────────────
    - name: Check if a Terraform state file exists
      stat:
        path: "{{ state_file }}"
      register: tf_state_check

    # ─────────────────────────────────────────────────────────
    # Extract Subscription ID from Terraform State (if present)
    # ─────────────────────────────────────────────────────────
    - name: Read subscription ID from Terraform state (if present)
      command: >
        grep -o '"subscription_id": *"[^"]*"' {{ state_file }}
      register: state_sub_output
      when: tf_state_check.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Extract subscription ID from grep output
      set_fact:
        state_subscription_id: "{{ state_sub_output.stdout | regex_search('\"subscription_id\": *\"([^\"]+)\"', '\\1') }}"
      when: state_sub_output is defined and state_sub_output.stdout is defined

    # ─────────────────────────────────────────────────────────
    # Clean Terraform State If Subscription Mismatch
    # ─────────────────────────────────────────────────────────
    - name: Check for missing or mismatched subscription ID
      set_fact:
        subscription_mismatch: true
      when: state_subscription_id is defined and subscription_id != state_subscription_id

    - name: Warn about stale Terraform state
      debug:
        msg: |
          Cleaning local Terraform state:
          - State subscription: {{ state_subscription_id | default('N/A') }}
          - Current subscription: {{ subscription_id }}
      when: subscription_mismatch | default(false)

    - name: Remove stale Terraform state files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ foundations_dir }}/.terraform"
        - "{{ foundations_dir }}/terraform.tfstate"
        - "{{ foundations_dir }}/terraform.tfstate.backup"
      when: subscription_mismatch | default(false)

    - name: Confirm state cleanup complete
      debug:
        msg: "✅ Stale Terraform state cleaned. Proceeding with fresh apply."
      when: subscription_mismatch | default(false)
