---
- name: Configure Jump Host
  hosts: jump
  become: true
  gather_facts: false

  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_retries: 5
    ansible_ssh_timeout: 60
    ansible_ssh_common_args: '-o ServerAliveInterval=60 -o ServerAliveCountMax=3 -o TCPKeepAlive=yes'

  tasks:

    # ─────────────────────────────────────────────────────
    # Wait for System Readiness
    # ─────────────────────────────────────────────────────
    - name: Check if cloud-init is complete
      ansible.builtin.command: sudo cloud-init status --wait
      register: cloud_init_result
      changed_when: false
      failed_when: false
      timeout: 300
      ignore_errors: true

    - name: Show cloud-init status
      ansible.builtin.debug:
        msg: "Cloud-init status: {{ cloud_init_result.stdout | default('Could not determine status') }}"
      when: cloud_init_result is defined

    - name: Alternative readiness check - verify system services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
      loop:
        - sshd
        - systemd-resolved
      register: service_check
      failed_when: false
      when: cloud_init_result.failed | default(false)

    # ─────────────────────────────────────────────────────
    # Check Package Manager Readiness
    # ─────────────────────────────────────────────────────
    - name: Wait for package manager to be available
      ansible.builtin.command: dnf --version
      register: dnf_check
      changed_when: false
      retries: 10
      delay: 30
      until: dnf_check.rc == 0

    - name: Check for package manager locks
      ansible.builtin.shell: |
        # Wait for any existing package operations to complete
        while sudo fuser /var/lib/rpm/.rpm.lock >/dev/null 2>&1 ; do
          echo "Waiting for RPM lock to be released..."
          sleep 10
        done
        echo "Package manager is ready"
      register: lock_check
      changed_when: false
      failed_when: false

    # ─────────────────────────────────────────────────────
    # System Update (with retries)
    # ─────────────────────────────────────────────────────
    - name: Update package cache
      ansible.builtin.dnf:
        update_cache: true
      register: cache_update
      retries: 3
      delay: 60
      until: cache_update is success

    - name: Update critical system packages (optional)
      ansible.builtin.dnf:
        name:
          - glibc
          - systemd
          - openssh-server
        state: latest
      register: system_update
      retries: 2
      delay: 30
      until: system_update is success
      failed_when: false
      ignore_errors: true

    # ─────────────────────────────────────────────────────
    # Core Tools (with retries and smaller batches)
    # ─────────────────────────────────────────────────────
    - name: Install core development tools
      ansible.builtin.package:
        name:
          - git
          - rsync
          - tar
          - unzip
        state: present
      register: core_tools
      retries: 3
      delay: 30
      until: core_tools is success

    - name: Install Python tools
      ansible.builtin.package:
        name:
          - python3-pip
          - python3.11
          - python3.11-pip
        state: present
      register: python_tools
      retries: 3
      delay: 30
      until: python_tools is success

    - name: Install containerization tools
      ansible.builtin.package:
        name:
          - podman
        state: present
      register: container_tools
      retries: 3
      delay: 30
      until: container_tools is success

    # ─────────────────────────────────────────────────────
    # ruamel.yaml Support
    # ─────────────────────────────────────────────────────
    - name: Try to install ruamel.yaml via dnf
      ansible.builtin.package:
        name: python3-ruamel-yaml
        state: present
      register: dnf_ruamel
      failed_when: false

    - name: Install ruamel.yaml via pip if dnf not available
      when: dnf_ruamel.failed or (dnf_ruamel.rc is defined and dnf_ruamel.rc != 0)
      ansible.builtin.pip:
        name: ruamel.yaml
        state: present
        executable: /usr/bin/pip3.11

    - name: Verify ruamel.yaml presence
      ansible.builtin.command: >
        python3.11 -c "import importlib.util;
                       print('ruamel.yaml found:',
                       bool(importlib.util.find_spec('ruamel.yaml')))"
      register: ruamel_check
      changed_when: false
      failed_when: false

    - name: Show ruamel.yaml presence result
      ansible.builtin.debug:
        msg: "{{ ruamel_check.stdout.strip() }}"

    # ─────────────────────────────────────────────────────
    # Confirm pip is installed
    # ─────────────────────────────────────────────────────
    - name: Ensure pip is installed for Python 3.11
      ansible.builtin.command: /usr/bin/python3.11 -m ensurepip --upgrade
      register: ensurepip_result
      changed_when: "'Successfully installed' in ensurepip_result.stdout"
      failed_when: ensurepip_result.rc != 0 and 'already satisfied' not in ensurepip_result.stdout

    # ─────────────────────────────────────────────────────
    # Ansible (User Install)
    # ─────────────────────────────────────────────────────
    - name: Check current Ansible version
      become: false
      ansible.builtin.command: ~/.local/bin/ansible --version
      register: ansible_ver_check
      failed_when: false
      changed_when: false

    - name: Install Ansible (>=9.0,<10.0) under user context
      become: false
      ansible.builtin.pip:
        name: "ansible>=9.0,<10.0"
        executable: /usr/bin/pip3.11
        extra_args: --user
      environment:
        PATH: "{{ ansible_env.HOME }}/.local/bin:{{ ansible_env.PATH }}"
      when: "'ansible' not in ansible_ver_check.stdout or '9.' not in ansible_ver_check.stdout"

    # ─────────────────────────────────────────────────────
    # User Environment Setup
    # ─────────────────────────────────────────────────────
    - name: Ensure ~/.bashrc has updated PATH for local bin
      ansible.builtin.lineinfile:
        path: /home/rheluser/.bashrc
        line: 'export PATH="$HOME/.local/bin:$PATH"'
        state: present
        create: true
        owner: rheluser
        group: rheluser
        mode: '0644'

    - name: Ensure ANSIBLE_CONFIG is set in ~/.bashrc
      ansible.builtin.lineinfile:
        path: /home/rheluser/.bashrc
        line: 'export ANSIBLE_CONFIG="/home/rheluser/ansible-cert-renewal-demo/ansible/ansible.cfg"'
        state: present
        create: true
        owner: rheluser
        group: rheluser
        mode: '0644'

    # ─────────────────────────────────────────────────────
    # Ensure destination directory exists on jump host
    # ─────────────────────────────────────────────────────
    - name: Ensure inventory directory exists on jump host
      ansible.builtin.file:
        path: /home/rheluser/ansible-cert-renewal-demo/ansible/inventory
        state: directory
        owner: rheluser
        group: rheluser
        mode: '0755'

    # ─────────────────────────────────────────────────────
    # Copy generated-hosts inventory file to jump host
    # ─────────────────────────────────────────────────────
    - name: Copy generated-hosts to jump host
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../inventory/generated-hosts"
        dest: /home/rheluser/ansible-cert-renewal-demo/ansible/inventory/generated-hosts
        owner: rheluser
        group: rheluser
        mode: '0600'

    # ─────────────────────────────────────────────────────
    # Final Confirmation
    # ─────────────────────────────────────────────────────
    - name: Show installed Ansible version
      become: false
      ansible.builtin.command: ~/.local/bin/ansible --version
      register: final_ansible_ver
      changed_when: false

    - name: Confirm installation complete
      ansible.builtin.debug:
        msg: >
          Jump host is ready.
          Installed Ansible version: {{ final_ansible_ver.stdout_lines[0] }}
