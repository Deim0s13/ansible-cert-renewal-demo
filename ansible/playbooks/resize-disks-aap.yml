---
- name: Resize and mount /opt on AAP node
  hosts: aap
  become: true
  gather_facts: false

  vars:
    opt_lv_size: 20g
    opt_mount_point: /opt
    opt_lv_name: optlv
    vg_name: rootvg

  tasks:

    # ─────────────────────────────────────────────────────
    # Step 0: Check available space in rootvg
    # ─────────────────────────────────────────────────────
    - name: Debug rootvg free space
      command: vgdisplay {{ vg_name }}
      register: vgdisplay_output
      changed_when: false

    - name: Print rootvg space
      debug:
        var: vgdisplay_output.stdout_lines

    # ─────────────────────────────────────────────────────
    # Step 1: Create Logical Volume for /opt
    # ─────────────────────────────────────────────────────
    - name: Create logical volume for /opt
      lvol:
        vg: "{{ vg_name }}"
        lv: "{{ opt_lv_name }}"
        size: "{{ opt_lv_size }}"
        state: present
      args:
        # This is for debugging only. It makes the module return more info.
        removes_backup: yes
      register: create_lv_result
      # REMOVE or comment out the 'failed_when' line if you had it.
      # failed_when: create_lv_result.failed is defined and create_lv_result.failed
      ignore_errors: false

    - name: Print LV creation result (full output for debugging)
      debug:
        var: create_lv_result
        # The 'verbosity' parameter ensures this debug task only runs at -vvv or higher.
        # Set to a lower number (e.g., 1) or remove for general debugging if you want it always visible.
        verbosity: 1

    # ─────────────────────────────────────────────────────
    # Step 2: Format the LV with XFS
    # ─────────────────────────────────────────────────────
    - name: Create filesystem on the new logical volume
      filesystem:
        fstype: xfs
        dev: "/dev/{{ vg_name }}/{{ opt_lv_name }}"
      # Crucial: Only run this if the LV creation was actually successful on the system.
      # This condition checks if the 'lv_name' key (which would be present on success)
      # in the result matches your desired LV name.
      when: create_lv_result.changed and ('lv_name' in create_lv_result and create_lv_result.lv_name == opt_lv_name)

    # ─────────────────────────────────────────────────────
    # Step 3: Ensure /opt Exists
    # ─────────────────────────────────────────────────────
    - name: Ensure /opt directory exists
      file:
        path: "{{ opt_mount_point }}"
        state: directory

    # ─────────────────────────────────────────────────────
    # Step 4: Mount /opt
    # ─────────────────────────────────────────────────────
    - name: Mount /opt
      mount:
        path: "{{ opt_mount_point }}"
        src: "/dev/{{ vg_name }}/{{ opt_lv_name }}"
        fstype: xfs
        opts: defaults
        state: mounted
      # Only attempt to mount if the LV was created and formatted
      when: create_lv_result.changed and ('lv_name' in create_lv_result and create_lv_result.lv_name == opt_lv_name)

    # ─────────────────────────────────────────────────────
    # Step 5: Persist /opt Mount in fstab
    # ─────────────────────────────────────────────────────
    - name: Make /opt mount persistent
      mount:
        path: "{{ opt_mount_point }}"
        src: "/dev/{{ vg_name }}/{{ opt_lv_name }}"
        fstype: xfs
        opts: defaults
        state: present
      # Only persist if the LV was created and formatted
      when: create_lv_result.changed and ('lv_name' in create_lv_result and create_lv_result.lv_name == opt_lv_name)


    # ─────────────────────────────────────────────────────
    # Step 6: Confirm mount success
    # ─────────────────────────────────────────────────────
    - name: Check mount target
      command: mountpoint {{ opt_mount_point }}
      register: mountpoint_check
      failed_when: mountpoint_check.rc != 0
      changed_when: false
      # Only check if the mount was attempted
      when: create_lv_result.changed and ('lv_name' in create_lv_result and create_lv_result.lv_name == opt_lv_name)
