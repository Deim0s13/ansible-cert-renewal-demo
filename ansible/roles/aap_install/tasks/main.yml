---
# ─────────────────────────────────────────────────────────────
# Role Tasks ▸ aap_install
# Purpose    : Copy bundle, unpack, run setup.sh
# ─────────────────────────────────────────────────────────────

# --- NEW DIAGNOSTIC TASK (Name corrected) ---
- name: Debug - Check aap_admin_password at role start
  ansible.builtin.debug:
    msg: "aap_admin_password value: '{{ aap_admin_password | default('UNDEFINED_OR_EMPTY') }}'"
  no_log: false # Temporarily set to false to see value
  # Run this task unconditionally to see its state
# --- END NEW DIAGNOSTIC TASK ---

# ─────────────────────────────────────────────────────────────
# Step 0 ▸ Assert vault variables are present
# ─────────────────────────────────────────────────────────────
- name: Assert AAP vault variables are defined
  ansible.builtin.assert:
    that:
      - aap_admin_password | length > 0
      - aap_pg_password    | length > 0
    fail_msg: >
      One or both vault variables are missing.  Ensure they exist in
      group_vars/aap/vault.yml and the vault is loaded.

# ─────────────────────────────────────────────────────────────
# Step 1 ▸ Install prerequisites on AAP VM
# ─────────────────────────────────────────────────────────────
- name: Ensure prerequisite RPMs are present
  ansible.builtin.package:
    name:
      - python3
      - podman
      - tar
      - unzip
    state: present

- name: Ensure /opt exists (LV should already be mounted)
  ansible.builtin.file:
    path: /opt
    state: directory
    mode: "0755"

# ─────────────────────────────────────────────────────────────
# Step 2 ▸ Rsync bundle from jump host to AAP VM
# ─────────────────────────────────────────────────────────────
- name: Check if bundle already exists on AAP node
  ansible.builtin.stat:
    path: "{{ aap_bundle_dest }}"
  register: bundle_stat

- name: Rsync bundle from jump host → AAP node
  ansible.builtin.synchronize:
    src: "{{ aap_bundle_src }}"
    dest: "{{ aap_bundle_dest }}"
    mode: push
    rsync_opts:
      - "--chmod=0644"
    rsync_path: "sudo rsync"
    use_ssh_args: true
  delegate_to: jump-host
  become: false
  when: not bundle_stat.stat.exists

# ─────────────────────────────────────────────────────────────
# Step 3 ▸ Extract bundle on AAP VM
# ─────────────────────────────────────────────────────────────
- name: Unpack bundle under /opt
  ansible.builtin.unarchive:
    src: "{{ aap_bundle_dest }}"
    dest: /opt
    remote_src: yes
  register: unarchive_result

# ─────────────────────────────────────────────────────────────
# Step 4 ▸ Auto-discover extracted directory (version-proof)
# ─────────────────────────────────────────────────────────────
- name: Locate setup.sh after extraction
  ansible.builtin.find:
    paths: /opt
    patterns: setup.sh
    recurse: yes
    file_type: file
  register: setup_search
  changed_when: false

- name: Fail if setup.sh not found
  ansible.builtin.fail:
    msg: "setup.sh was not located under /opt after extraction."
  when: setup_search.matched == 0

- name: Set aap_setup_dir fact (directory of setup.sh)
  ansible.builtin.set_fact:
    aap_setup_dir: "{{ setup_search.files[0].path | dirname }}"

# ─────────────────────────────────────────────────────────────
# Step 5 ▸ Create inventory for setup.sh
# ─────────────────────────────────────────────────────────────
- name: Create single-node inventory file for AAP installer
  ansible.builtin.copy:
    dest: "{{ aap_setup_dir }}/inventory"
    mode: "0600"
    content: |
      [automationcontroller]
      localhost ansible_connection=local ansible_python_interpreter=/usr/bin/python3

      [all:vars]
      admin_password='{{ aap_admin_password }}'
      pg_host=''
      pg_port='5432'
      pg_database='awx'
      pg_username='awx'
      pg_password='{{ aap_pg_password }}'
      registry_url='{{ aap_registry_url }}'

# ─────────────────────────────────────────────────────────────
# Step 6 ▸ Run AAP installer
# ─────────────────────────────────────────────────────────────
- name: Execute AAP installer
  ansible.builtin.command: "{{ aap_setup_dir }}/setup.sh"
  register: aap_install
  changed_when: "'Complete' in aap_install.stdout"
  environment:
    ANSIBLE_FORCE_COLOR: "true"
  no_log: true

- name: Show tail of installer log (harmless)
  ansible.builtin.debug:
    var: aap_install.stdout_lines[-20:]
